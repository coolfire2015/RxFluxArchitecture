buildscript {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${BUILD_GRADLE}"
        //ButterKnife支持
        classpath "com.jakewharton:butterknife-gradle-plugin:${BUTTER_KNIFE}"
        //Kotlin支持
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${KOTLIN_VERSION}"
        //Kotlin全开放编译器插件
        classpath "org.jetbrains.kotlin:kotlin-allopen:${KOTLIN_VERSION}"
        //AndroidX支持
        classpath "com.android.tools.build.jetifier:jetifier-processor:${JETIFIER}"
        //Maven支持
        classpath "com.github.dcendents:android-maven-gradle-plugin:${ANDROID_MAVEN_GRADLE_PLUGIN}"
        //Tinker支持
        classpath "com.tinkerpatch.sdk:tinkerpatch-gradle-plugin:${TINKER}"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * release apk name
 */
def releaseName = "demo_v" + getGitVersionName() + "_${releaseTime()}_release.apk"

/**
 * debug apk name
 */
def debugName = "demo_v" + getGitVersionName() + "_debug.apk"

/**
 * 输出目录
 */
def mOutputs = "$rootDir/outputs/build_" + getGitVersionName()

/**
 * release时间
 * @return
 */
def releaseTime() {
    return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+08:00"))
}

/**
 * 获取local本地配置文件
 * @return
 */
def getlocalProperty() {
    Properties buildProps = new Properties()
    buildProps.load(new FileInputStream(file('../local.properties')))
    return buildProps
}

/**
 * 读取Svn日志
 * @return
 */
def getSvnVersionInfo() {
    return 'svn log -r HEAD'.execute().text.trim()
}

/**
 * 读取Svn Revision Number
 * @return
 */
def getSvnRevisionNumber() {
    return 'svn info --show-item revision'.execute().text.trim()
}

/**
 * 读取Git commit number，作为Version Code
 * @return
 */
def gitGitVersionCode() {
    try {
        return 'git rev-list HEAD --first-parent --count'.execute().text.trim().toInteger()
    }
    catch (ignored) {
        return 1
    }
}

/**
 * 读取Git Tag，作为Version Name
 * @return
 */
def getGitVersionName() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return "1.0.0"
    }
}

/**
 * 读取Git日志
 * @return
 */
def getGitVersionInfo() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

/**
 * 获取Git分支名
 */
def getGitBranch() {
    return 'git symbolic-ref --short -q HEAD'.execute().text.trim()
}

/**
 * 输出日志
 */
def buildLog() {
    File outputFile = new File("$rootDir/outputs/build_" + APP_VERSION_NAME)
    if (!outputFile.exists()) outputFile.mkdirs()
    FileWriter fw = new FileWriter("$rootDir/outputs/build_" + APP_VERSION_NAME + File.separator + "log.txt")
    StringBuilder builder = new StringBuilder()
    builder.append("[构建时间]=" + new Date().format("yyyy/MM/dd HH:mm", TimeZone.getTimeZone("GMT+08:00")))
    builder.append("\r\n")
    builder.append("[版本编号]=" + gitGitVersionCode())
    builder.append("\r\n")
    builder.append("[版本名称]=" + getGitVersionName())
    builder.append("\r\n")
    builder.append("[提交记录]=" + getGitVersionInfo())
    fw.write(builder.toString())
    fw.flush()
    fw.close()
}