//Common模块和业务模块通用依赖

android {
    //编译版本
    compileSdkVersion COMPILE_SDK_VERSION as int
    //lint设置
    lintOptions {
        //lint 不被终止
        abortOnError false
        //打Release版本时,不进行检测
        checkReleaseBuilds false
        //关闭检索的功能
        disable 'GoogleAppIndexingWarning'
    }
    //数据绑定
    dataBinding {
        enabled = true
    }
    //Dex分包
    dexOptions {
        jumboMode = true
        javaMaxHeapSize "4g"//增加java堆内存大小
    }
    //Java1.8支持
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    //单元测试,Robolectric支持
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

//将源代码打包进aar
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.javaDirectories
}

artifacts {
    archives sourcesJar
}

//仓库
repositories {
    //本地仓库,添加aar支持
    flatDir { dirs 'libs' }
}

//通用的依赖库
dependencies {
    //内核
    implementation project(':core-arch')
    implementation "com.github.coolfire2015:RxFluxUtils:${RX_FLUX_UTILS}"
    implementation "com.github.coolfire2015:RxFluxImage:${RX_FLUX_IMAGE}"
    //X-Core
    implementation "androidx.core:core-ktx:${X_CORE}"
    //X-Fragment
    implementation "androidx.fragment:fragment-ktx:${X_FRAGMENT}"
    //X-Lifecycle
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${X_LIFECYCLE}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${X_LIFECYCLE}"
    //X-Navigation
    implementation "androidx.navigation:navigation-ui-ktx:${X_NAVIGATION}"
    implementation "androidx.navigation:navigation-fragment-ktx:${X_NAVIGATION}"
    //X-Room
    implementation "androidx.room:room-runtime:${X_ROOM}"
    implementation "androidx.room:room-ktx:${X_ROOM}"
    implementation "androidx.room:room-rxjava2:${X_ROOM}"
    //X_Paging
    implementation "androidx.paging:paging-runtime-ktx:${X_PAGING}"
    implementation "androidx.paging:paging-rxjava2-ktx:${X_PAGING}"
    //X-WorkManager
    implementation "androidx.work:work-runtime-ktx:${X_WORK}"
    //X-MultiDex
    implementation "androidx.multidex:multidex:${X_MULTIDEX}"
    //X-CardView
    implementation "androidx.cardview:cardview:${X_CARD_VIEW}"
    //X-RecyclerView
    implementation "androidx.recyclerview:recyclerview:${X_RECYCLE_RVIEW}"
    //X-Material
    implementation "com.google.android.material:material:${X_MATERIAL}"
    //X_ConstraintLayout
    implementation "androidx.constraintlayout:constraintlayout:${X_CONSTRAINT}"
    //Kotlin支持
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${KOTLIN_VERSION}"
    //Kotlin Coroutines 支持
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${KOTLIN_COROUTINES}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${KOTLIN_COROUTINES}"
    //OkHttp
    implementation "com.squareup.okhttp3:okhttp:${OKHTTP}"
    implementation "com.squareup.okhttp3:logging-interceptor:${OKHTTP}"
    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:${RETROFIT}"
    implementation "com.squareup.retrofit2:converter-gson:${RETROFIT}"
    implementation "com.squareup.retrofit2:converter-scalars:${RETROFIT}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${RETROFIT}"
    //Json
    implementation "com.google.code.gson:gson:${GSON}"
    //Mmkv
    implementation "com.tencent:mmkv:${MMKV}"
    //ARouter
    implementation "com.alibaba:arouter-api:${AROUTER_API}"
    //AutoDispose
    implementation "com.uber.autodispose:autodispose-android-archcomponents:${AUTO_DISPOSE}"
    //Anko Commons
    implementation "org.jetbrains.anko:anko-commons:$ANKO"
    //SmartRefreshLayout
    implementation "com.scwang.smartrefresh:SmartRefreshLayout:${SMART_REFRESH_LAYOUT}"
    //RecyclerView适配器
    implementation "com.github.CymChad:BaseRecyclerViewAdapterHelper:${BASE_RECYCLERVIEW_ADAPTER_HELPER}"
    //日志展示
    implementation "com.orhanobut:logger:${ORHANOBUT_LOGGER}"
    //LeakCanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${LEAK_CANARY}"

    //测试Android
    testImplementation "androidx.test:runner:${TEST_X_RUNNER}"
    testImplementation "androidx.test.ext:junit:${TEST_X_JUNIT}"
    testImplementation "androidx.test.espresso:espresso-core:${TEST_X_ESPRESSO}"
    testImplementation "androidx.test:core:${TEST_X_CORE}"
    testImplementation "androidx.test:rules:${TEST_X_RULES}"
    testImplementation "androidx.fragment:fragment-testing:${X_FRAGMENT}"
    //单元测试
    testImplementation "junit:junit:${TEST_JUNIT}"
    testImplementation "org.mockito:mockito-core:${TEST_MOCKITO}"//解决Mockito无法mock final class的问题
    testImplementation "org.mockito:mockito-inline:${TEST_MOCKITO}"//解决Mockito any()等返回null的问题
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${TEST_MOCKITO_KOTLIN}"
    testImplementation "org.robolectric:robolectric:${TEST_ROBOLECTRIC}"
    testImplementation "com.github.fabioCollini.daggermock:daggermock:${TEST_DEAAGE_MOCK}"
    testImplementation "com.github.fabioCollini.daggermock:daggermock-kotlin:${TEST_DEAAGE_MOCK}"
    //测试Api
    testImplementation "com.squareup.okhttp3:okhttp-tls:${OKHTTP}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${OKHTTP}"
    testImplementation "com.github.andrzejchm.RESTMock:android:${TEST_REST_MOCK}"
    //测试工具
    testImplementation "org.assertj:assertj-core:${TEST_ASSERT_J}"
    testImplementation "com.squareup.assertj:assertj-android:${TEST_ASSERT_J_ANDROID}"
    testImplementation "org.powermock:powermock-api-mockito2:${TEST_POWER_MOCK}"
    testImplementation "org.powermock:powermock-module-junit4:${TEST_POWER_MOCK}"
    testImplementation "org.powermock:powermock-module-junit4-rule:${TEST_POWER_MOCK}"
    testImplementation "org.powermock:powermock-classloading-xstream:${TEST_POWER_MOCK}"
    testImplementation "com.github.coolfire2015:RxFluxTestUtils:${RX_FLUX_TEST_UTILS}"
}