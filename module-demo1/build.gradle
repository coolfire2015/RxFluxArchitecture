apply plugin: isModuleAsApp.toBoolean() ? 'com.android.application' : 'com.android.library'
apply from: rootProject.file('depends.gradle')

android {
    //签名配置,自定义,用在defaultConfig中
    signingConfigs {
        debug {
            storeFile file(STORE_DEBUG_FILE)
        }
        release {
            storeFile file(STORE_RELEASE_FILE)
            storePassword STORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }
    }
    //默认配置
    defaultConfig {
        //支持MultiDex分包
        multiDexEnabled true
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode rootProject.gitGitVersionCode()
        versionName rootProject.getGitVersionName()
        signingConfig signingConfigs.debug
        //使用vector图片
        vectorDrawables.useSupportLibrary = true
        //单元测试配置
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //显示分支名字
        buildConfigField 'String', 'BRANCH', '"' + rootProject.getGitBranch() + '"'
        //当前模块名字
        buildConfigField 'String', 'MODULE_NAME', '"' + project.getName() + '"'
    }
    //构建过程
    buildTypes {
        //自定义buildType.name
        debug {
            //单元测试mockUrl
            buildConfigField "boolean", "MOCK_URL", '' + isUseMockUrl.toBoolean() + ''
            //混淆开关
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            //混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名配置
            signingConfig signingConfigs.debug
        }
        //自定义buildType.name
        release {
            //混淆开关
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            //混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名配置
            signingConfig signingConfigs.release
        }
    }
    //TODO 注解编译参数设置
    kapt {
        arguments {
            arg("AROUTER_MODULE_NAME", project.getName())
            arg('eventBusIndex', 'com.huyingbao.module.demo.FirstEventBusIndex')
        }
    }
    //代码目录设置
    sourceSets {
        main {
            if (isModuleAsApp.toBoolean()) {
                //作为独立App
                manifest.srcFile 'src/app/AndroidManifest.xml'
                java.srcDirs 'src/app/java'
                res.srcDirs 'src/app/res'
            } else {
                //作为依赖库
                manifest.srcFile 'src/library/AndroidManifest.xml'
            }
        }
    }
    //修改生成的apk名字
    if (isModuleAsApp.toBoolean()) {
//        applicationVariants.all { variant ->
//            def provider = variant.getPackageApplicationProvider().get()
//            if (variant.buildType.name != "debug") {
//                provider.outputDirectory = new File(project.rootDir.absolutePath + "/release/outputs/apk")
//            }
//            provider.outputFile.apkDatas.forEach {
//                apkData ->
//                    apkData.outputFileName = ((project.name != "app") ? project.name : rootProject.name) + "-" +
//                            variant.versionName + "-" +
//                            variant.buildType.name + ".apk"
//            }
//        }

        // applicationVariants are e.g. debug, release
//        applicationVariants.all { variant ->
//            variant.outputs.each { output ->
//                // For each separate APK per architecture, set a unique version code as described here:
//                // https://developer.android.com/studio/build/configure-apk-splits.html
//                def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
//                def abi = output.getFilter(OutputFile.ABI)
//                if (abi != null) {  // null for the universal-debug, universal-release variants
//                    output.versionCodeOverride = versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
//                }
//
//            }
//        }
    }
}

dependencies {
    //通用Base库
    api project(':module-common')
}