//Kotlin业务模块通用依赖
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

android {
    //编译版本
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION
    //lint设置
    lintOptions {
        //lint 不被终止
        abortOnError false
        //打Release版本时,不进行检测
        checkReleaseBuilds false
        //关闭检索的功能
        disable 'GoogleAppIndexingWarning'
    }
    //构建功能
    buildFeatures {
        //支持 DataBinding
        dataBinding = true
    }
    //Dex分包
    dexOptions {
        jumboMode = true
        javaMaxHeapSize "4g"//增加java堆内存大小
    }
    //Java1.8支持
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    //Kotlin Java1.8支持
    kotlinOptions {
        jvmTarget = "1.8"
    }
    //Kotlin 实验功能
    androidExtensions {
        experimental = true
    }
    //单元测试,Robolectric支持
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

//将源代码打包进aar
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.javaDirectories
}

artifacts {
    archives sourcesJar
}

//仓库
repositories {
    //本地仓库,添加aar支持
    flatDir { dirs 'libs' }
}

//Gradle可以缓存SNAPSHOT构建，以确保Gradle始终选择构建的“最新”版本：
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    //通用Base库
    implementation project(':core-base')
    kapt project(':core-arch-processor')
    kapt project(':core-eventbus-processor')

    //解决Mockito any()等返回null的问题
    testImplementation project(':core-test')

    //编译时生成
    kapt "androidx.room:room-compiler:${X_ROOM}"
    //Hilt依赖注入
    api "com.google.dagger:hilt-android:${HILT}"
    kapt "com.google.dagger:hilt-android-compiler:${HILT}"
    //Hilt-ViewModel依赖注入
    api "androidx.hilt:hilt-lifecycle-viewmodel:${HILT_VIEWMODEL}"
    kapt "androidx.hilt:hilt-compiler:${HILT_VIEWMODEL}"
    //Arouter
    kapt "com.alibaba:arouter-compiler:${AROUTER_COMPILER}"

    //测试Android
    testImplementation "androidx.test:runner:${TEST_X_RUNNER}"
    testImplementation "androidx.test.ext:junit:${TEST_X_JUNIT}"
    testImplementation "androidx.test:core:${TEST_X_CORE}"
    testImplementation "androidx.test:rules:${TEST_X_RULES}"
    testImplementation "androidx.fragment:fragment-testing:${X_FRAGMENT}"
    testImplementation "androidx.test.espresso:espresso-core:${TEST_X_ESPRESSO}"
    testImplementation "androidx.test.espresso:espresso-intents:${TEST_X_ESPRESSO}"
    testImplementation "androidx.room:room-testing:${X_ROOM}"
    //单元测试
    testImplementation "junit:junit:${TEST_JUNIT}"
    testImplementation "org.mockito:mockito-core:${TEST_MOCKITO}"
    testImplementation "org.mockito:mockito-inline:${TEST_MOCKITO}"//解决Mockito无法mock final class的问题

    //testImplementation project(':core-test')
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${TEST_MOCKITO_KOTLIN}"
    testImplementation "org.robolectric:robolectric:${TEST_ROBOLECTRIC}"
    testImplementation "com.github.fabioCollini.daggermock:daggermock:${TEST_DEAAGE_MOCK}"
    testImplementation "com.github.fabioCollini.daggermock:daggermock-kotlin:${TEST_DEAAGE_MOCK}"
    //测试Api
    testImplementation "com.squareup.okhttp3:okhttp-tls:${OKHTTP}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${OKHTTP}"
    testImplementation "com.github.andrzejchm.RESTMock:android:${TEST_REST_MOCK}"

    //单元测试编译时生成
    kaptTest project(':core-arch-processor')
    kaptTest project(':core-eventbus-processor')
    kaptTest "androidx.room:room-compiler:${X_ROOM}"
    kaptTest "com.alibaba:arouter-compiler:${AROUTER_COMPILER}"
//    kaptTest "org.permissionsdispatcher:permissionsdispatcher-processor:${PERMISSIONS_DISPATCHER}"
}
